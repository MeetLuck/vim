*myRegEx.txt*    For Vim version 8.0     Last Modified: 2018 March 19

                    Regular Expression(RegEx)



Table of Contents~
================================================================================
                                                                       *myRegEx* 

1. metachracters............................................|myRegEx-metacharacters|
2. escape characters........................................|myRegEx-escape|


#1. meta-characters#
--------------------------------------------------------------------------------
                                                           *myRegEx-metacharacters* 
outside [square-brackets]
    \   escape character
    ^   start-of-line
    $   end-of-line<EOL>
    .   match single character except $<EOL> 
    []  start/end character class definition
    ()  start/end subpattern
    |   start of alternative branch
    ?   also 0 or 1 quantifier
    *   0 or more quantifier
    +   1 or more quantifier
    {}  start/end min/max quantifier
    \< \>  a word boundary, beginning/end of a word
    \_^ start of line anywhere note including $(EOL)
    \_. single character or $(EOL)
    \_$ end of line anywhere
    \zs anything, sets start of match
    \ze anything, sets end of match
    \%^ beginning of file
    \%$ end of file
    \%V inside Visual area
    \%#     cursor position
    \%23l   line 23
    \%23c   column 23
    \%23v   virtual column 23

    Note: literals  `\`__\__  `\`^  `\`$  `\`__.__  `\`__[__  

inside [square-brackets]
    \   escape character
    ^   negate the class, but only if the first character
    -   indicates character range
    [   POSIX character class(only if followed by POSIX syntax)
    ]   terminates the character class


#2. escape characters#
---------------------------------------------------------------------------------------
                                                                         *myRegEx-escape* 
    \Qliterals\E~
     \Qabc$xyz\E

    Non-printing characters~
    \e  <Esc>
    \t  <Tab>
    \b  <Backspace>
    \r  <CR>
    \n  <EOL> newline

    character classes~
    \d     digit           [0-9]             \D     Non-digit       [^0-9]
    \a     alphabet        [a-zA-Z]          \A     Non-alphabet    [^a-zA-Z]
    \s     whitespace      <Space> <Tab>     \S     Non-whitespace  
    \w     word            [0-9a-zA-Z_]      \W     Non-word        [^0-9a-zA-z]
    \l     lowercase       [a-z]             \L     Non-lowercase   [^a-z]
    \u     uppercase       [A-Z]             \U     Non-uppercase   [^A-Z]

    character set   [ABC]   same as 'A | B | C'
    negated set     [^ABC]
    range           [A-C]

    myWarning  character classes such as \d or \u does NOT work to match a digit or uppercase


#3. alternations#
---------------------------------------------------------------------------------------
                                                                    *myRegEx-alternation* 
>
    A|B|C    matches A or B or C
    (A|B)C   matches AC or AC
    A|BC     matches A or BC
    A|^BC    matches A or ^BC


#4. very magic#
---------------------------------------------------------------------------------------
                                                                      *myRegEx-verymagic* 
  ✓ very magic \v~
    everything is special except 0-9a-zA-Z_ 
    literals \\,\^,\$,\.,\+,\*,\{,\[,\|,\(,\@,\<

#4. assertions#
---------------------------------------------------------------------------------------
                                                                      *myRegEx-assertion* 
circumflex(^)~
    need not be the first character of pattern if alternatives are involed,
    but is should be the first thing in each alternative.
    if all possible alternatives start with ^, it is said to be 'anchored'.

dollar($)~
    is an asserttion that is true ONLY IF the current matching point is 
    at the end of the subject string, or immediately before a newline at the
    end of the string.
    need not be the last character of the pattern if alternatives are involved,
    but it should be the last item in any branch.

assertions(zero-length)~
    Note: an assertion specifies a condition that has to be met at a particular point
       in a match WITHOUT CONSUMING any character from the subject string

    \b  matches at a word boundary
    \B  matches when not at a word boundary
    \A  matches at the start of the subject
    \Z  matches at the end of the subject
    \z  matches ONLY at the end of the subject
    \G  matches at the first matching position in the subject


#5. square brackets []  and character classes#
---------------------------------------------------------------------------------------
                                                                      *myRegEx-classes* 

a character class matches a SINGLE character in the subject.
 e.g. 
    [aeiou]    matches any vowel
    [^aeiou]   matches any NON-vowel
    [\[\^\]]   matches literal [ or ^ or ]

hyphen '-' can be used to specify a range of chracters in a character class.
[\- literal hyphen]

 e.g. 
    [1-3\a]    matches [1-3] or [a-z]   myWarning  \a not working in VIM
    [1-5w-z]   matches [1-5] or [w-z]

  \k   keyword character
  \p  printable character
  \P  printable character but digits
  \s  whitespace character: <Space> and <Tab>
  \d  digit   [0-9]
  \w  word charcater [0-9a-zA-Z_]
  \a  alphabetic character  [a-zA-Z]
  \l  lowercase character [a-z]
  \u  uppercase character [A-Z]
  \h  head of word character [a-zA-Z_]
  \K  keyword characer but digits
  \S  non whitespace character
  \D  non digit
  \W  non word character [^0-9a-zA-Z_]
  \A  non alphabetic character  [^a-zA-Z]
  \L  non lowercase character [^a-z]
  \U  non uppercase character [^A-Z]
  \_x character class with $(EOL) included
    e.g. \_w  [0-9a-zA-Z_$]
  \n  EOL
  \r  <CR>
  \e  <ESC>
  ~   last substitute string
  \1~\9  back reference
  \c  ignore case
  \C  match case
  \m  magic
  \M  magic off
  \v  very magic
  \V  very nomagic
  \%d match specified decimal character e.g. \%d123
  
  greedy as MUCH as possible~
  \+	  matches 1 or more of the preceding atom, as MANY as possible.
	\*    matches 0 or more of the preceding atom, as MANY as possible.
  \{n,m}
  \{,m} matches at __most__ __m__ (from 0 to m) of the preceding characters
  \{n,} matches at __least__ __n__ of of the preceding character
  non-greedy as FEW as possible~
  \{-n,m}
  \{-}  matches 0 or more of the preceding atom, as FEW as possible.

  #positive look ahead \@=  (?=pattern) in Perl#
     myWarning |zero-width|
  e.g. `foo\(bar\)\@=`           #where @ = bar#     `food(?=bar)`
       -> in 'foobar',  matches 'food'
  e.g. `foo\(bar\)\@=followed`   #where @ = bar#     `food(?!bar)followed`
       -> in 'foobarfollowed',  matches __NOTHING__ becase of |zero-width|
          1. matches 'foo'
          2. matches 'bar'
          3. try to match 'followed' at 'bar' position because of |zero-width|

  #negative look ahead \@! (?!pattern) in Perl#
  e.g. `foo\(bar\)\@!`   #where @=!bar#      `foo(?!bar)`
      -> in 'fooaar', 'foocar', matches 'foo'
      -> not in 'foobar'
  e.g. `/\vif` `(then)@!.*$`   #where @=!then#
      -> in 'if then', does not match
      -> in 'if !then', does match 

  #positive look behind \@<=  (?<=pattern) in Perl#
  e.g.  `\(foo\)\@<=bar` # where @=foo#      `(?=foo)bar`
     -> in 'foobar',matches bar

  #negative look behind \@<! (?<!pattern) in Perl#
  

#6. subpatterns#
---------------------------------------------------------------------------------------
                                                                      *myRegEx-subpatterns* 

1. it localizes a set of ALTERNATIVES.
    e.g. 
    cataract | erpillar |      → matches 'cataract' or 'erpillar' or 'empty' string
    cat(aract | erpillar|)     → matches 'cataract' or 'caterpillar' or 'cat'


2. it sets up the subpattern as a CAPTURING subpattern.
    capturing substrings~
    subject string : "the red king"
    /the ((red|white) (king|queen))
    →  captured substrings : "red king","red","king" are numbered 1,2, and 3.
    without capturing substrings~
    subject string : "the white queen"
    /the ((?:red|white) (king|queen))
    →  captured substrings : "white queen","queen" are numbered 1,2.

3. named subpatterns~
    (?<name>...)
    (?'name'...)
    (?P<name>...)

4. quantifiers~
    can follow any of the following items.
    a literal character
    a dot metacharacter     .+ 
    an escape such as       \d+,\w*,...
    a character class       [a-z]+
    a back reference
    a subpattern            (capturing)+

    {n,m}
    z{2,4} matches 'zz','zzz','zzzz'
    [aeiou]{3,} matches AT LEAST 3 successive vowels
    \d{8} matches EXACTLY 8 digit.

    *   is equivalent  to {0,}
    +   is equivalent  to {1,}
    ?   is equivalent  to {0,1}

greedy~
    match as MUCH as possible

    e.g. 
>
    pattern : /\*.*\*/
    subject : /* first comment */ not comment /* second comment */
    matches /* first ....  /* second comment */
<

non-greedy~
    match as FEW as Possible
    if qunatifier is followed by a quenstion mark '?'
    .*?
    .+?
    [a-z]+?
    \s{2,4}?  

>
    subject : /* first comment */ not comment /* second comment */
    pattern : /\*.*?\*/     → matches /* first comment */
    pattern : /\*[^*/]*\*/  → matches /* first comment */

    subject : "xyz123abc123"
    pattern : (.*)abc   → matches 'xyz123abc'
    pattern : (.*)abc\1 → matches '123abc123'
<





 vim: set et ts=2 sw=2 sts=2 ft=help:
